//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gama.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GamaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LT=2, GT=3, LE=4, GE=5, EQ=6, NE=7, ADD=8, SUB=9, MUL=10, DIV=11, 
		MOD=12, LP=13, RP=14, LB=15, RB=16, LQ=17, RQ=18, AND=19, OR=20, XOR=21, 
		HASH=22, SC=23, NSDiv=24, Colon=25, Comma=26, Period=27, Equals=28, Namespace=29, 
		Let=30, Operator=31, Using=32, Return=33, Delegate=34, Extern=35, Packed=36, 
		Struct=37, Impl=38, True=39, False=40, Import=41, StackAlloc=42, New=43, 
		If=44, Else=45, While=46, Do=47, OpMul=48, OpAdd=49, OpComp=50, OpComparison=51, 
		Symbol=52, StringLiteral=53, CharLiteral=54, FloatingLiteral=55, IntegerLiteral=56, 
		NumericLiteral=57, MultiComment=58, LineComment=59, WhiteSpace=60;
	public const int
		RULE_program = 0, RULE_namespace = 1, RULE_topLevelStatement = 2, RULE_structLevelStatement = 3, 
		RULE_statement = 4, RULE_stmtVarDef = 5, RULE_stmtAssign = 6, RULE_stmtIf = 7, 
		RULE_stmtReturn = 8, RULE_stmtWhile = 9, RULE_stmtFnCall = 10, RULE_topLevelBlock = 11, 
		RULE_block = 12, RULE_expr = 13, RULE_exprList = 14, RULE_topLevelUsingNamespace = 15, 
		RULE_topLevelDelegate = 16, RULE_topLevelExternDef = 17, RULE_topLevelFuncDef = 18, 
		RULE_topLevelStructDef = 19, RULE_topLevelImpl = 20, RULE_symbolTypePairList = 21, 
		RULE_symbolTypePair = 22, RULE_ellipsis = 23, RULE_funcAttr = 24, RULE_symbolList = 25, 
		RULE_opMul = 26, RULE_opAdd = 27, RULE_opComp = 28, RULE_opLogic = 29, 
		RULE_fqtnRoot = 30, RULE_fqtn = 31, RULE_fqtnList = 32, RULE_typeList = 33, 
		RULE_typeName = 34, RULE_ptr = 35;
	public static readonly string[] ruleNames = {
		"program", "namespace", "topLevelStatement", "structLevelStatement", "statement", 
		"stmtVarDef", "stmtAssign", "stmtIf", "stmtReturn", "stmtWhile", "stmtFnCall", 
		"topLevelBlock", "block", "expr", "exprList", "topLevelUsingNamespace", 
		"topLevelDelegate", "topLevelExternDef", "topLevelFuncDef", "topLevelStructDef", 
		"topLevelImpl", "symbolTypePairList", "symbolTypePair", "ellipsis", "funcAttr", 
		"symbolList", "opMul", "opAdd", "opComp", "opLogic", "fqtnRoot", "fqtn", 
		"fqtnList", "typeList", "typeName", "ptr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'...'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'&'", 
		"'|'", "'^'", "'#'", "';'", "'::'", "':'", "','", "'.'", "'='", "'namespace'", 
		"'let'", "'operator'", "'using'", "'return'", "'delegate'", "'extern'", 
		"'packed'", "'struct'", "'impl'", "'true'", "'false'", "'import'", "'stackalloc'", 
		"'new'", "'if'", "'else'", "'while'", "'do'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LT", "GT", "LE", "GE", "EQ", "NE", "ADD", "SUB", "MUL", "DIV", 
		"MOD", "LP", "RP", "LB", "RB", "LQ", "RQ", "AND", "OR", "XOR", "HASH", 
		"SC", "NSDiv", "Colon", "Comma", "Period", "Equals", "Namespace", "Let", 
		"Operator", "Using", "Return", "Delegate", "Extern", "Packed", "Struct", 
		"Impl", "True", "False", "Import", "StackAlloc", "New", "If", "Else", 
		"While", "Do", "OpMul", "OpAdd", "OpComp", "OpComparison", "Symbol", "StringLiteral", 
		"CharLiteral", "FloatingLiteral", "IntegerLiteral", "NumericLiteral", 
		"MultiComment", "LineComment", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gama.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GamaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GamaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GamaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GamaParser.Eof, 0); }
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Namespace || _la==Import) {
				{
				{
				State = 72; @namespace();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
	 
		public NamespaceContext() { }
		public virtual void CopyFrom(NamespaceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamespaceRootStartContext : NamespaceContext {
		public ITerminalNode Namespace() { return GetToken(GamaParser.Namespace, 0); }
		public FqtnRootContext fqtnRoot() {
			return GetRuleContext<FqtnRootContext>(0);
		}
		public TopLevelBlockContext topLevelBlock() {
			return GetRuleContext<TopLevelBlockContext>(0);
		}
		public NamespaceRootStartContext(NamespaceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterNamespaceRootStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitNamespaceRootStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceRootStart(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStmtContext : NamespaceContext {
		public ITerminalNode Import() { return GetToken(GamaParser.Import, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaParser.StringLiteral, 0); }
		public ITerminalNode SC() { return GetToken(GamaParser.SC, 0); }
		public ImportStmtContext(NamespaceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterImportStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitImportStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceRootContext : NamespaceContext {
		public ITerminalNode Namespace() { return GetToken(GamaParser.Namespace, 0); }
		public TopLevelBlockContext topLevelBlock() {
			return GetRuleContext<TopLevelBlockContext>(0);
		}
		public NamespaceRootContext(NamespaceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterNamespaceRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitNamespaceRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceRoot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDefaultContext : NamespaceContext {
		public ITerminalNode Namespace() { return GetToken(GamaParser.Namespace, 0); }
		public FqtnContext fqtn() {
			return GetRuleContext<FqtnContext>(0);
		}
		public TopLevelBlockContext topLevelBlock() {
			return GetRuleContext<TopLevelBlockContext>(0);
		}
		public NamespaceDefaultContext(NamespaceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterNamespaceDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitNamespaceDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new NamespaceDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(Namespace);
				State = 81; fqtn();
				State = 82; topLevelBlock();
				}
				break;
			case 2:
				_localctx = new NamespaceRootStartContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(Namespace);
				State = 85; fqtnRoot();
				State = 86; topLevelBlock();
				}
				break;
			case 3:
				_localctx = new NamespaceRootContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; Match(Namespace);
				State = 89; topLevelBlock();
				}
				break;
			case 4:
				_localctx = new ImportStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; Match(Import);
				State = 91; Match(StringLiteral);
				State = 92; Match(SC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		public TopLevelUsingNamespaceContext topLevelUsingNamespace() {
			return GetRuleContext<TopLevelUsingNamespaceContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GamaParser.SC, 0); }
		public TopLevelDelegateContext topLevelDelegate() {
			return GetRuleContext<TopLevelDelegateContext>(0);
		}
		public TopLevelExternDefContext topLevelExternDef() {
			return GetRuleContext<TopLevelExternDefContext>(0);
		}
		public TopLevelFuncDefContext topLevelFuncDef() {
			return GetRuleContext<TopLevelFuncDefContext>(0);
		}
		public TopLevelStructDefContext topLevelStructDef() {
			return GetRuleContext<TopLevelStructDefContext>(0);
		}
		public TopLevelImplContext topLevelImpl() {
			return GetRuleContext<TopLevelImplContext>(0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_topLevelStatement);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Using:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; topLevelUsingNamespace();
				State = 96; Match(SC);
				}
				break;
			case Delegate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; topLevelDelegate();
				State = 99; Match(SC);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; topLevelExternDef();
				State = 102; Match(SC);
				}
				break;
			case LQ:
			case Symbol:
				EnterOuterAlt(_localctx, 4);
				{
				State = 104; topLevelFuncDef();
				}
				break;
			case Packed:
			case Struct:
				EnterOuterAlt(_localctx, 5);
				{
				State = 105; topLevelStructDef();
				}
				break;
			case Impl:
				EnterOuterAlt(_localctx, 6);
				{
				State = 106; topLevelImpl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructLevelStatementContext : ParserRuleContext {
		public StructLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structLevelStatement; } }
	 
		public StructLevelStatementContext() { }
		public virtual void CopyFrom(StructLevelStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructLevelDelegateContext : StructLevelStatementContext {
		public TopLevelDelegateContext topLevelDelegate() {
			return GetRuleContext<TopLevelDelegateContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GamaParser.SC, 0); }
		public StructLevelDelegateContext(StructLevelStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStructLevelDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStructLevelDelegate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructLevelDelegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructLevelMethodContext : StructLevelStatementContext {
		public TopLevelFuncDefContext topLevelFuncDef() {
			return GetRuleContext<TopLevelFuncDefContext>(0);
		}
		public StructLevelMethodContext(StructLevelStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStructLevelMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStructLevelMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructLevelMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructLevelStatementContext structLevelStatement() {
		StructLevelStatementContext _localctx = new StructLevelStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_structLevelStatement);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Delegate:
				_localctx = new StructLevelDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; topLevelDelegate();
				State = 110; Match(SC);
				}
				break;
			case LQ:
			case Symbol:
				_localctx = new StructLevelMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; topLevelFuncDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StmtVarDefContext stmtVarDef() {
			return GetRuleContext<StmtVarDefContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GamaParser.SC, 0); }
		public StmtAssignContext stmtAssign() {
			return GetRuleContext<StmtAssignContext>(0);
		}
		public StmtIfContext stmtIf() {
			return GetRuleContext<StmtIfContext>(0);
		}
		public StmtWhileContext stmtWhile() {
			return GetRuleContext<StmtWhileContext>(0);
		}
		public StmtFnCallContext stmtFnCall() {
			return GetRuleContext<StmtFnCallContext>(0);
		}
		public StmtReturnContext stmtReturn() {
			return GetRuleContext<StmtReturnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; stmtVarDef();
				State = 116; Match(SC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; stmtAssign();
				State = 119; Match(SC);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; stmtIf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; stmtWhile();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 123; stmtFnCall();
				State = 124; Match(SC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 126; stmtReturn();
				State = 127; Match(SC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtVarDefContext : ParserRuleContext {
		public StmtVarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtVarDef; } }
	 
		public StmtVarDefContext() { }
		public virtual void CopyFrom(StmtVarDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtVarDefNullContext : StmtVarDefContext {
		public ITerminalNode Let() { return GetToken(GamaParser.Let, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode Colon() { return GetToken(GamaParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StmtVarDefNullContext(StmtVarDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtVarDefNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtVarDefNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtVarDefNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtVarDefBaseContext : StmtVarDefContext {
		public ITerminalNode Let() { return GetToken(GamaParser.Let, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode Equals() { return GetToken(GamaParser.Equals, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtVarDefBaseContext(StmtVarDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtVarDefBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtVarDefBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtVarDefBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtVarDefFullContext : StmtVarDefContext {
		public ITerminalNode Let() { return GetToken(GamaParser.Let, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode Colon() { return GetToken(GamaParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Equals() { return GetToken(GamaParser.Equals, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtVarDefFullContext(StmtVarDefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtVarDefFull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtVarDefFull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtVarDefFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtVarDefContext stmtVarDef() {
		StmtVarDefContext _localctx = new StmtVarDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_stmtVarDef);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new StmtVarDefBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(Let);
				State = 132; Match(Symbol);
				State = 133; Match(Equals);
				State = 134; expr(0);
				}
				break;
			case 2:
				_localctx = new StmtVarDefFullContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(Let);
				State = 136; Match(Symbol);
				State = 137; Match(Colon);
				State = 138; typeName();
				State = 139; Match(Equals);
				State = 140; expr(0);
				}
				break;
			case 3:
				_localctx = new StmtVarDefNullContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 142; Match(Let);
				State = 143; Match(Symbol);
				State = 144; Match(Colon);
				State = 145; typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAssignContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode Equals() { return GetToken(GamaParser.Equals, 0); }
		public StmtAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAssignContext stmtAssign() {
		StmtAssignContext _localctx = new StmtAssignContext(Context, State);
		EnterRule(_localctx, 12, RULE_stmtAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; expr(0);
			State = 149; Match(Equals);
			State = 150; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtIfContext : ParserRuleContext {
		public StmtIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtIf; } }
	 
		public StmtIfContext() { }
		public virtual void CopyFrom(StmtIfContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtIfElseIfContext : StmtIfContext {
		public ITerminalNode[] If() { return GetTokens(GamaParser.If); }
		public ITerminalNode If(int i) {
			return GetToken(GamaParser.If, i);
		}
		public ITerminalNode[] LP() { return GetTokens(GamaParser.LP); }
		public ITerminalNode LP(int i) {
			return GetToken(GamaParser.LP, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RP() { return GetTokens(GamaParser.RP); }
		public ITerminalNode RP(int i) {
			return GetToken(GamaParser.RP, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode[] Else() { return GetTokens(GamaParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(GamaParser.Else, i);
		}
		public StmtIfElseIfContext(StmtIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtIfElseIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtIfElseIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIfElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtIfBaseContext : StmtIfContext {
		public ITerminalNode If() { return GetToken(GamaParser.If, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmtIfBaseContext(StmtIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtIfBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtIfBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIfBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtIfElseIfElseContext : StmtIfContext {
		public ITerminalNode[] If() { return GetTokens(GamaParser.If); }
		public ITerminalNode If(int i) {
			return GetToken(GamaParser.If, i);
		}
		public ITerminalNode[] LP() { return GetTokens(GamaParser.LP); }
		public ITerminalNode LP(int i) {
			return GetToken(GamaParser.LP, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RP() { return GetTokens(GamaParser.RP); }
		public ITerminalNode RP(int i) {
			return GetToken(GamaParser.RP, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode[] Else() { return GetTokens(GamaParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(GamaParser.Else, i);
		}
		public StmtIfElseIfElseContext(StmtIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtIfElseIfElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtIfElseIfElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIfElseIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtIfElseContext : StmtIfContext {
		public ITerminalNode If() { return GetToken(GamaParser.If, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode Else() { return GetToken(GamaParser.Else, 0); }
		public StmtIfElseContext(StmtIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtIfElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtIfElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtIfContext stmtIf() {
		StmtIfContext _localctx = new StmtIfContext(Context, State);
		EnterRule(_localctx, 14, RULE_stmtIf);
		int _la;
		try {
			int _alt;
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new StmtIfBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(If);
				State = 153; Match(LP);
				State = 154; expr(0);
				State = 155; Match(RP);
				State = 156; block();
				}
				break;
			case 2:
				_localctx = new StmtIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(If);
				State = 159; Match(LP);
				State = 160; expr(0);
				State = 161; Match(RP);
				State = 162; block();
				State = 163; Match(Else);
				State = 164; block();
				}
				break;
			case 3:
				_localctx = new StmtIfElseIfContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; Match(If);
				State = 167; Match(LP);
				State = 168; expr(0);
				State = 169; Match(RP);
				State = 170; block();
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 171; Match(Else);
					State = 172; Match(If);
					State = 173; Match(LP);
					State = 174; expr(0);
					State = 175; Match(RP);
					State = 176; block();
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Else );
				}
				break;
			case 4:
				_localctx = new StmtIfElseIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; Match(If);
				State = 183; Match(LP);
				State = 184; expr(0);
				State = 185; Match(RP);
				State = 186; block();
				State = 194;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 187; Match(Else);
						State = 188; Match(If);
						State = 189; Match(LP);
						State = 190; expr(0);
						State = 191; Match(RP);
						State = 192; block();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 196;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 198; Match(Else);
				State = 199; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtReturnContext : ParserRuleContext {
		public StmtReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtReturn; } }
	 
		public StmtReturnContext() { }
		public virtual void CopyFrom(StmtReturnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtReturnVoidContext : StmtReturnContext {
		public ITerminalNode Return() { return GetToken(GamaParser.Return, 0); }
		public StmtReturnVoidContext(StmtReturnContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtReturnVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtReturnVoid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtReturnVoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtReturnValueContext : StmtReturnContext {
		public ITerminalNode Return() { return GetToken(GamaParser.Return, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtReturnValueContext(StmtReturnContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtReturnValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtReturnValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtReturnValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtReturnContext stmtReturn() {
		StmtReturnContext _localctx = new StmtReturnContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmtReturn);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new StmtReturnVoidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; Match(Return);
				}
				break;
			case 2:
				_localctx = new StmtReturnValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; Match(Return);
				State = 205; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtWhileContext : ParserRuleContext {
		public StmtWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtWhile; } }
	 
		public StmtWhileContext() { }
		public virtual void CopyFrom(StmtWhileContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtDoWhileContext : StmtWhileContext {
		public ITerminalNode Do() { return GetToken(GamaParser.Do, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode While() { return GetToken(GamaParser.While, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public StmtDoWhileContext(StmtWhileContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtDoWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtDoWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtWhileBaseContext : StmtWhileContext {
		public ITerminalNode While() { return GetToken(GamaParser.While, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmtWhileBaseContext(StmtWhileContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtWhileBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtWhileBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtWhileBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtWhileContext stmtWhile() {
		StmtWhileContext _localctx = new StmtWhileContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmtWhile);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				_localctx = new StmtWhileBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; Match(While);
				State = 209; Match(LP);
				State = 210; expr(0);
				State = 211; Match(RP);
				State = 212; block();
				}
				break;
			case Do:
				_localctx = new StmtDoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(Do);
				State = 215; block();
				State = 216; Match(While);
				State = 217; Match(LP);
				State = 218; expr(0);
				State = 219; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtFnCallContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public StmtFnCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtFnCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterStmtFnCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitStmtFnCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtFnCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtFnCallContext stmtFnCall() {
		StmtFnCallContext _localctx = new StmtFnCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_stmtFnCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; expr(0);
			State = 224; Match(LP);
			State = 225; exprList();
			State = 226; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelBlockContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(GamaParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GamaParser.RB, 0); }
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public TopLevelBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelBlockContext topLevelBlock() {
		TopLevelBlockContext _localctx = new TopLevelBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_topLevelBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(LB);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LQ) | (1L << Using) | (1L << Delegate) | (1L << Extern) | (1L << Packed) | (1L << Struct) | (1L << Impl) | (1L << Symbol))) != 0)) {
				{
				{
				State = 229; topLevelStatement();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(GamaParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GamaParser.RB, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(LB);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << LP) | (1L << AND) | (1L << Let) | (1L << Return) | (1L << True) | (1L << False) | (1L << If) | (1L << While) | (1L << Do) | (1L << Symbol) | (1L << StringLiteral) | (1L << CharLiteral) | (1L << FloatingLiteral) | (1L << IntegerLiteral))) != 0)) {
				{
				{
				State = 238; statement();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprOpMulContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpMulContext opMul() {
			return GetRuleContext<OpMulContext>(0);
		}
		public ExprOpMulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprOpMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprOpMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOpMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralStringContext : ExprContext {
		public ITerminalNode StringLiteral() { return GetToken(GamaParser.StringLiteral, 0); }
		public ExprLiteralStringContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprLiteralString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprLiteralString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIndexContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LQ() { return GetToken(GamaParser.LQ, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode RQ() { return GetToken(GamaParser.RQ, 0); }
		public ExprIndexContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOpAddContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpAddContext opAdd() {
			return GetRuleContext<OpAddContext>(0);
		}
		public ExprOpAddContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprOpAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprOpAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOpAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOpCompContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpCompContext opComp() {
			return GetRuleContext<OpCompContext>(0);
		}
		public ExprOpCompContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprOpComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprOpComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOpComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprParenthesisContext : ExprContext {
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public ExprParenthesisContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPointerLoadContext : ExprContext {
		public ITerminalNode MUL() { return GetToken(GamaParser.MUL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprPointerLoadContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprPointerLoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprPointerLoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPointerLoad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCallContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ExprCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralIntegerContext : ExprContext {
		public ITerminalNode IntegerLiteral() { return GetToken(GamaParser.IntegerLiteral, 0); }
		public ExprLiteralIntegerContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprLiteralInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprLiteralInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteralInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralBooleanContext : ExprContext {
		public ITerminalNode True() { return GetToken(GamaParser.True, 0); }
		public ITerminalNode False() { return GetToken(GamaParser.False, 0); }
		public ExprLiteralBooleanContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprLiteralBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprLiteralBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteralBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralCharContext : ExprContext {
		public ITerminalNode CharLiteral() { return GetToken(GamaParser.CharLiteral, 0); }
		public ExprLiteralCharContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprLiteralChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprLiteralChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteralChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFQMBContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] Period() { return GetTokens(GamaParser.Period); }
		public ITerminalNode Period(int i) {
			return GetToken(GamaParser.Period, i);
		}
		public ITerminalNode[] Symbol() { return GetTokens(GamaParser.Symbol); }
		public ITerminalNode Symbol(int i) {
			return GetToken(GamaParser.Symbol, i);
		}
		public ExprFQMBContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprFQMB(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprFQMB(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFQMB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralFloatingContext : ExprContext {
		public ITerminalNode FloatingLiteral() { return GetToken(GamaParser.FloatingLiteral, 0); }
		public ExprLiteralFloatingContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprLiteralFloating(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprLiteralFloating(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteralFloating(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFQTNContext : ExprContext {
		public FqtnContext fqtn() {
			return GetRuleContext<FqtnContext>(0);
		}
		public ExprFQTNContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprFQTN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprFQTN(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFQTN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAddressOfContext : ExprContext {
		public ITerminalNode AND() { return GetToken(GamaParser.AND, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprAddressOfContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOpLogicContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpLogicContext opLogic() {
			return GetRuleContext<OpLogicContext>(0);
		}
		public ExprOpLogicContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprOpLogic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprOpLogic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOpLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				{
				_localctx = new ExprParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 247; Match(LP);
				State = 248; expr(0);
				State = 249; Match(RP);
				}
				break;
			case AND:
				{
				_localctx = new ExprAddressOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 251; Match(AND);
				State = 252; expr(15);
				}
				break;
			case MUL:
				{
				_localctx = new ExprPointerLoadContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 253; Match(MUL);
				State = 254; expr(14);
				}
				break;
			case IntegerLiteral:
				{
				_localctx = new ExprLiteralIntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 255; Match(IntegerLiteral);
				}
				break;
			case FloatingLiteral:
				{
				_localctx = new ExprLiteralFloatingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256; Match(FloatingLiteral);
				}
				break;
			case True:
			case False:
				{
				_localctx = new ExprLiteralBooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				_la = TokenStream.LA(1);
				if ( !(_la==True || _la==False) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CharLiteral:
				{
				_localctx = new ExprLiteralCharContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 258; Match(CharLiteral);
				}
				break;
			case StringLiteral:
				{
				_localctx = new ExprLiteralStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259; Match(StringLiteral);
				}
				break;
			case Symbol:
				{
				_localctx = new ExprFQTNContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260; fqtn();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 297;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new ExprOpMulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 263;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 264; opMul();
						State = 265; expr(5);
						}
						break;
					case 2:
						{
						_localctx = new ExprOpAddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 267;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 268; opAdd();
						State = 269; expr(4);
						}
						break;
					case 3:
						{
						_localctx = new ExprOpCompContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 271;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 272; opComp();
						State = 273; expr(3);
						}
						break;
					case 4:
						{
						_localctx = new ExprOpLogicContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 275;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 276; opLogic();
						State = 277; expr(2);
						}
						break;
					case 5:
						{
						_localctx = new ExprCallContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 279;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 280; Match(LP);
						State = 282;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << LP) | (1L << AND) | (1L << True) | (1L << False) | (1L << Symbol) | (1L << StringLiteral) | (1L << CharLiteral) | (1L << FloatingLiteral) | (1L << IntegerLiteral))) != 0)) {
							{
							State = 281; exprList();
							}
						}

						State = 284; Match(RP);
						}
						break;
					case 6:
						{
						_localctx = new ExprIndexContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 285;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 286; Match(LQ);
						State = 287; exprList();
						State = 288; Match(RQ);
						}
						break;
					case 7:
						{
						_localctx = new ExprFQMBContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 290;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 293;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 291; Match(Period);
								State = 292; Match(Symbol);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 295;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(GamaParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(GamaParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; expr(0);
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 303; Match(Comma);
				State = 304; expr(0);
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelUsingNamespaceContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(GamaParser.Using, 0); }
		public ITerminalNode Namespace() { return GetToken(GamaParser.Namespace, 0); }
		public FqtnContext fqtn() {
			return GetRuleContext<FqtnContext>(0);
		}
		public TopLevelUsingNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelUsingNamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelUsingNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelUsingNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelUsingNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelUsingNamespaceContext topLevelUsingNamespace() {
		TopLevelUsingNamespaceContext _localctx = new TopLevelUsingNamespaceContext(Context, State);
		EnterRule(_localctx, 30, RULE_topLevelUsingNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(Using);
			State = 311; Match(Namespace);
			State = 312; fqtn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDelegateContext : ParserRuleContext {
		public ITerminalNode Delegate() { return GetToken(GamaParser.Delegate, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public ITerminalNode Colon() { return GetToken(GamaParser.Colon, 0); }
		public FqtnContext fqtn() {
			return GetRuleContext<FqtnContext>(0);
		}
		public FqtnListContext fqtnList() {
			return GetRuleContext<FqtnListContext>(0);
		}
		public TopLevelDelegateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDelegate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelDelegate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDelegate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDelegateContext topLevelDelegate() {
		TopLevelDelegateContext _localctx = new TopLevelDelegateContext(Context, State);
		EnterRule(_localctx, 32, RULE_topLevelDelegate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(Delegate);
			State = 315; Match(Symbol);
			State = 316; Match(LP);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Symbol) {
				{
				State = 317; fqtnList();
				}
			}

			State = 320; Match(RP);
			{
			State = 321; Match(Colon);
			State = 322; fqtn();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelExternDefContext : ParserRuleContext {
		public ITerminalNode Extern() { return GetToken(GamaParser.Extern, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public EllipsisContext ellipsis() {
			return GetRuleContext<EllipsisContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(GamaParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TopLevelExternDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelExternDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelExternDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelExternDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelExternDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelExternDefContext topLevelExternDef() {
		TopLevelExternDefContext _localctx = new TopLevelExternDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_topLevelExternDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(Extern);
			State = 325; Match(Symbol);
			State = 326; Match(LP);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Symbol) {
				{
				State = 327; typeList();
				}
			}

			State = 330; Match(RP);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 331; ellipsis();
				}
			}

			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 334; Match(Colon);
				State = 335; typeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelFuncDefContext : ParserRuleContext {
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode LP() { return GetToken(GamaParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GamaParser.RP, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncAttrContext funcAttr() {
			return GetRuleContext<FuncAttrContext>(0);
		}
		public SymbolTypePairListContext symbolTypePairList() {
			return GetRuleContext<SymbolTypePairListContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(GamaParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TopLevelFuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelFuncDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelFuncDefContext topLevelFuncDef() {
		TopLevelFuncDefContext _localctx = new TopLevelFuncDefContext(Context, State);
		EnterRule(_localctx, 36, RULE_topLevelFuncDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LQ) {
				{
				State = 338; funcAttr();
				}
			}

			State = 341; Match(Symbol);
			State = 342; Match(LP);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Symbol) {
				{
				State = 343; symbolTypePairList();
				}
			}

			State = 346; Match(RP);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 347; Match(Colon);
				State = 348; typeName();
				}
			}

			State = 351; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStructDefContext : ParserRuleContext {
		public ITerminalNode Struct() { return GetToken(GamaParser.Struct, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode LB() { return GetToken(GamaParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GamaParser.RB, 0); }
		public ITerminalNode Packed() { return GetToken(GamaParser.Packed, 0); }
		public SymbolTypePairListContext symbolTypePairList() {
			return GetRuleContext<SymbolTypePairListContext>(0);
		}
		public TopLevelStructDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStructDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelStructDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelStructDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStructDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStructDefContext topLevelStructDef() {
		TopLevelStructDefContext _localctx = new TopLevelStructDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_topLevelStructDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Packed) {
				{
				State = 353; Match(Packed);
				}
			}

			State = 356; Match(Struct);
			State = 357; Match(Symbol);
			State = 358; Match(LB);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Symbol) {
				{
				State = 359; symbolTypePairList();
				}
			}

			State = 362; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelImplContext : ParserRuleContext {
		public ITerminalNode Impl() { return GetToken(GamaParser.Impl, 0); }
		public FqtnContext fqtn() {
			return GetRuleContext<FqtnContext>(0);
		}
		public ITerminalNode LB() { return GetToken(GamaParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GamaParser.RB, 0); }
		public StructLevelStatementContext[] structLevelStatement() {
			return GetRuleContexts<StructLevelStatementContext>();
		}
		public StructLevelStatementContext structLevelStatement(int i) {
			return GetRuleContext<StructLevelStatementContext>(i);
		}
		public TopLevelImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelImpl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTopLevelImpl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTopLevelImpl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelImpl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelImplContext topLevelImpl() {
		TopLevelImplContext _localctx = new TopLevelImplContext(Context, State);
		EnterRule(_localctx, 40, RULE_topLevelImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(Impl);
			State = 365; fqtn();
			State = 366; Match(LB);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LQ) | (1L << Delegate) | (1L << Symbol))) != 0)) {
				{
				{
				State = 367; structLevelStatement();
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolTypePairListContext : ParserRuleContext {
		public SymbolTypePairContext[] symbolTypePair() {
			return GetRuleContexts<SymbolTypePairContext>();
		}
		public SymbolTypePairContext symbolTypePair(int i) {
			return GetRuleContext<SymbolTypePairContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(GamaParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(GamaParser.Comma, i);
		}
		public SymbolTypePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolTypePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterSymbolTypePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitSymbolTypePairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolTypePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolTypePairListContext symbolTypePairList() {
		SymbolTypePairListContext _localctx = new SymbolTypePairListContext(Context, State);
		EnterRule(_localctx, 42, RULE_symbolTypePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; symbolTypePair();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 376; Match(Comma);
				State = 377; symbolTypePair();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolTypePairContext : ParserRuleContext {
		public ITerminalNode Symbol() { return GetToken(GamaParser.Symbol, 0); }
		public ITerminalNode Colon() { return GetToken(GamaParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SymbolTypePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolTypePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterSymbolTypePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitSymbolTypePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolTypePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolTypePairContext symbolTypePair() {
		SymbolTypePairContext _localctx = new SymbolTypePairContext(Context, State);
		EnterRule(_localctx, 44, RULE_symbolTypePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(Symbol);
			State = 384; Match(Colon);
			State = 385; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EllipsisContext : ParserRuleContext {
		public EllipsisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ellipsis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterEllipsis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitEllipsis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEllipsis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EllipsisContext ellipsis() {
		EllipsisContext _localctx = new EllipsisContext(Context, State);
		EnterRule(_localctx, 46, RULE_ellipsis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncAttrContext : ParserRuleContext {
		public ITerminalNode LQ() { return GetToken(GamaParser.LQ, 0); }
		public ITerminalNode RQ() { return GetToken(GamaParser.RQ, 0); }
		public ITerminalNode[] Symbol() { return GetTokens(GamaParser.Symbol); }
		public ITerminalNode Symbol(int i) {
			return GetToken(GamaParser.Symbol, i);
		}
		public ITerminalNode[] LP() { return GetTokens(GamaParser.LP); }
		public ITerminalNode LP(int i) {
			return GetToken(GamaParser.LP, i);
		}
		public SymbolListContext[] symbolList() {
			return GetRuleContexts<SymbolListContext>();
		}
		public SymbolListContext symbolList(int i) {
			return GetRuleContext<SymbolListContext>(i);
		}
		public ITerminalNode[] RP() { return GetTokens(GamaParser.RP); }
		public ITerminalNode RP(int i) {
			return GetToken(GamaParser.RP, i);
		}
		public FuncAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcAttr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterFuncAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitFuncAttr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncAttrContext funcAttr() {
		FuncAttrContext _localctx = new FuncAttrContext(Context, State);
		EnterRule(_localctx, 48, RULE_funcAttr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(LQ);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 390; Match(Symbol);
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LP) {
					{
					State = 391; Match(LP);
					State = 392; symbolList();
					State = 393; Match(RP);
					}
				}

				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Symbol );
			State = 401; Match(RQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolListContext : ParserRuleContext {
		public ITerminalNode[] Symbol() { return GetTokens(GamaParser.Symbol); }
		public ITerminalNode Symbol(int i) {
			return GetToken(GamaParser.Symbol, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(GamaParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(GamaParser.Comma, i);
		}
		public SymbolListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitSymbolList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolListContext symbolList() {
		SymbolListContext _localctx = new SymbolListContext(Context, State);
		EnterRule(_localctx, 50, RULE_symbolList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(Symbol);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 404; Match(Comma);
				State = 405; Match(Symbol);
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpMulContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(GamaParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(GamaParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(GamaParser.MOD, 0); }
		public OpMulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMul; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterOpMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitOpMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpMulContext opMul() {
		OpMulContext _localctx = new OpMulContext(Context, State);
		EnterRule(_localctx, 52, RULE_opMul);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAddContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GamaParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(GamaParser.SUB, 0); }
		public OpAddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAdd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterOpAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitOpAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAddContext opAdd() {
		OpAddContext _localctx = new OpAddContext(Context, State);
		EnterRule(_localctx, 54, RULE_opAdd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCompContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(GamaParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(GamaParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(GamaParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(GamaParser.GE, 0); }
		public ITerminalNode EQ() { return GetToken(GamaParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(GamaParser.NE, 0); }
		public OpCompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opComp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterOpComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitOpComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCompContext opComp() {
		OpCompContext _localctx = new OpCompContext(Context, State);
		EnterRule(_localctx, 56, RULE_opComp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << EQ) | (1L << NE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLogicContext : ParserRuleContext {
		public ITerminalNode[] AND() { return GetTokens(GamaParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(GamaParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(GamaParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(GamaParser.OR, i);
		}
		public ITerminalNode XOR() { return GetToken(GamaParser.XOR, 0); }
		public OpLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLogic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterOpLogic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitOpLogic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLogicContext opLogic() {
		OpLogicContext _localctx = new OpLogicContext(Context, State);
		EnterRule(_localctx, 58, RULE_opLogic);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417; Match(AND);
				State = 418; Match(AND);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419; Match(OR);
				State = 420; Match(OR);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 421; Match(XOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FqtnRootContext : ParserRuleContext {
		public ITerminalNode[] Symbol() { return GetTokens(GamaParser.Symbol); }
		public ITerminalNode Symbol(int i) {
			return GetToken(GamaParser.Symbol, i);
		}
		public ITerminalNode[] NSDiv() { return GetTokens(GamaParser.NSDiv); }
		public ITerminalNode NSDiv(int i) {
			return GetToken(GamaParser.NSDiv, i);
		}
		public FqtnRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fqtnRoot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterFqtnRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitFqtnRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFqtnRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FqtnRootContext fqtnRoot() {
		FqtnRootContext _localctx = new FqtnRootContext(Context, State);
		EnterRule(_localctx, 60, RULE_fqtnRoot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(Symbol);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NSDiv) {
				{
				{
				State = 425; Match(NSDiv);
				State = 426; Match(Symbol);
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FqtnContext : ParserRuleContext {
		public ITerminalNode[] Symbol() { return GetTokens(GamaParser.Symbol); }
		public ITerminalNode Symbol(int i) {
			return GetToken(GamaParser.Symbol, i);
		}
		public ITerminalNode[] NSDiv() { return GetTokens(GamaParser.NSDiv); }
		public ITerminalNode NSDiv(int i) {
			return GetToken(GamaParser.NSDiv, i);
		}
		public FqtnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fqtn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterFqtn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitFqtn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFqtn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FqtnContext fqtn() {
		FqtnContext _localctx = new FqtnContext(Context, State);
		EnterRule(_localctx, 62, RULE_fqtn);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(Symbol);
			State = 437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 433; Match(NSDiv);
					State = 434; Match(Symbol);
					}
					} 
				}
				State = 439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FqtnListContext : ParserRuleContext {
		public FqtnContext[] fqtn() {
			return GetRuleContexts<FqtnContext>();
		}
		public FqtnContext fqtn(int i) {
			return GetRuleContext<FqtnContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(GamaParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(GamaParser.Comma, i);
		}
		public FqtnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fqtnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterFqtnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitFqtnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFqtnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FqtnListContext fqtnList() {
		FqtnListContext _localctx = new FqtnListContext(Context, State);
		EnterRule(_localctx, 64, RULE_fqtnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; fqtn();
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 441; Match(Comma);
				State = 442; fqtn();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(GamaParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(GamaParser.Comma, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; typeName();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 449; Match(Comma);
				State = 450; typeName();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public FqtnContext fqtn() {
			return GetRuleContext<FqtnContext>(0);
		}
		public PtrContext[] ptr() {
			return GetRuleContexts<PtrContext>();
		}
		public PtrContext ptr(int i) {
			return GetRuleContext<PtrContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; fqtn();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MUL) {
				{
				{
				State = 457; ptr();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(GamaParser.MUL, 0); }
		public PtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.EnterPtr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaListener typedListener = listener as IGamaListener;
			if (typedListener != null) typedListener.ExitPtr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaVisitor<TResult> typedVisitor = visitor as IGamaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrContext ptr() {
		PtrContext _localctx = new PtrContext(Context, State);
		EnterRule(_localctx, 70, RULE_ptr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(MUL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '>', '\x1D4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x3', '\x2', 
		'\a', '\x2', 'L', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'O', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '`', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'n', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 't', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x84', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x95', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', '\xB5', '\n', '\t', '\r', '\t', '\xE', 
		'\t', '\xB6', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x6', '\t', '\xC5', '\n', '\t', '\r', '\t', 
		'\xE', '\t', '\xC6', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xCC', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\xD1', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xE0', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xE9', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xEC', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\xF2', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\xF5', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x108', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x11D', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x6', '\xF', '\x128', '\n', '\xF', '\r', '\xF', '\xE', 
		'\xF', '\x129', '\a', '\xF', '\x12C', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\x12F', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x134', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x137', 
		'\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x141', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x14B', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x14F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x153', 
		'\n', '\x13', '\x3', '\x14', '\x5', '\x14', '\x156', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x15B', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x160', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x5', '\x15', '\x165', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x16B', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x173', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x176', '\v', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x17D', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x180', '\v', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18E', '\n', '\x1A', 
		'\x6', '\x1A', '\x190', '\n', '\x1A', '\r', '\x1A', '\xE', '\x1A', '\x191', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\x199', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x19C', 
		'\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1A9', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x1AE', '\n', ' ', '\f', ' ', 
		'\xE', ' ', '\x1B1', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\a', 
		'!', '\x1B6', '\n', '!', '\f', '!', '\xE', '!', '\x1B9', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x1BE', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x1C1', '\v', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\a', '#', '\x1C6', '\n', '#', '\f', '#', '\xE', '#', '\x1C9', '\v', 
		'#', '\x3', '$', '\x3', '$', '\a', '$', '\x1CD', '\n', '$', '\f', '$', 
		'\xE', '$', '\x1D0', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x2', 
		'\x3', '\x1C', '&', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', '\x2', '\x6', '\x3', '\x2', 
		')', '*', '\x3', '\x2', '\f', '\xE', '\x3', '\x2', '\n', '\v', '\x3', 
		'\x2', '\x4', '\t', '\x2', '\x1F0', '\x2', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '_', '\x3', '\x2', '\x2', '\x2', '\x6', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\b', 's', '\x3', '\x2', '\x2', '\x2', '\n', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x94', '\x3', '\x2', '\x2', '\x2', '\xE', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x14', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x18', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x107', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x130', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x138', '\x3', '\x2', '\x2', '\x2', '\"', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x155', '\x3', '\x2', '\x2', '\x2', '(', '\x164', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x16E', '\x3', '\x2', '\x2', '\x2', ',', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x185', '\x3', '\x2', '\x2', '\x2', '\x32', '\x187', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x195', '\x3', '\x2', '\x2', '\x2', '\x36', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1A1', '\x3', '\x2', '\x2', '\x2', '<', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1AA', '\x3', '\x2', '\x2', '\x2', '@', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1CA', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1D1', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', 
		'\x4', '\x3', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x2', '\x2', '\x3', 'Q', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x1F', '\x2', '\x2', 'S', 
		'T', '\x5', '@', '!', '\x2', 'T', 'U', '\x5', '\x18', '\r', '\x2', 'U', 
		'`', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x1F', '\x2', '\x2', 
		'W', 'X', '\x5', '>', ' ', '\x2', 'X', 'Y', '\x5', '\x18', '\r', '\x2', 
		'Y', '`', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x1F', '\x2', '\x2', 
		'[', '`', '\x5', '\x18', '\r', '\x2', '\\', ']', '\a', '+', '\x2', '\x2', 
		']', '^', '\a', '\x37', '\x2', '\x2', '^', '`', '\a', '\x19', '\x2', '\x2', 
		'_', 'R', '\x3', '\x2', '\x2', '\x2', '_', 'V', '\x3', '\x2', '\x2', '\x2', 
		'_', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '\\', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x5', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x5', 
		' ', '\x11', '\x2', '\x62', '\x63', '\a', '\x19', '\x2', '\x2', '\x63', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\"', '\x12', 
		'\x2', '\x65', '\x66', '\a', '\x19', '\x2', '\x2', '\x66', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x5', '$', '\x13', '\x2', 'h', 'i', '\a', 
		'\x19', '\x2', '\x2', 'i', 'n', '\x3', '\x2', '\x2', '\x2', 'j', 'n', 
		'\x5', '&', '\x14', '\x2', 'k', 'n', '\x5', '(', '\x15', '\x2', 'l', 'n', 
		'\x5', '*', '\x16', '\x2', 'm', '\x61', '\x3', '\x2', '\x2', '\x2', 'm', 
		'\x64', '\x3', '\x2', '\x2', '\x2', 'm', 'g', '\x3', '\x2', '\x2', '\x2', 
		'm', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x5', '\"', '\x12', '\x2', 'p', 'q', '\a', '\x19', '\x2', 
		'\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '&', '\x14', 
		'\x2', 's', 'o', '\x3', '\x2', '\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', 
		'\x2', 't', '\t', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\f', '\a', 
		'\x2', 'v', 'w', '\a', '\x19', '\x2', '\x2', 'w', '\x84', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x5', '\xE', '\b', '\x2', 'y', 'z', '\a', '\x19', 
		'\x2', '\x2', 'z', '\x84', '\x3', '\x2', '\x2', '\x2', '{', '\x84', '\x5', 
		'\x10', '\t', '\x2', '|', '\x84', '\x5', '\x14', '\v', '\x2', '}', '~', 
		'\x5', '\x16', '\f', '\x2', '~', '\x7F', '\a', '\x19', '\x2', '\x2', '\x7F', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x5', '\x12', '\n', 
		'\x2', '\x81', '\x82', '\a', '\x19', '\x2', '\x2', '\x82', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x83', 'u', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x83', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '|', '\x3', '\x2', '\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\a', ' ', '\x2', '\x2', '\x86', 
		'\x87', '\a', '\x36', '\x2', '\x2', '\x87', '\x88', '\a', '\x1E', '\x2', 
		'\x2', '\x88', '\x95', '\x5', '\x1C', '\xF', '\x2', '\x89', '\x8A', '\a', 
		' ', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x36', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\x1B', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x46', '$', 
		'\x2', '\x8D', '\x8E', '\a', '\x1E', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'\x1C', '\xF', '\x2', '\x8F', '\x95', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\a', ' ', '\x2', '\x2', '\x91', '\x92', '\a', '\x36', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x1B', '\x2', '\x2', '\x93', '\x95', '\x5', 
		'\x46', '$', '\x2', '\x94', '\x85', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x94', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\r', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x5', 
		'\x1C', '\xF', '\x2', '\x97', '\x98', '\a', '\x1E', '\x2', '\x2', '\x98', 
		'\x99', '\x5', '\x1C', '\xF', '\x2', '\x99', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\a', '.', '\x2', '\x2', '\x9B', '\x9C', '\a', 
		'\xF', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x1C', '\xF', '\x2', '\x9D', 
		'\x9E', '\a', '\x10', '\x2', '\x2', '\x9E', '\x9F', '\x5', '\x1A', '\xE', 
		'\x2', '\x9F', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'.', '\x2', '\x2', '\xA1', '\xA2', '\a', '\xF', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x1C', '\xF', '\x2', '\xA3', '\xA4', '\a', '\x10', '\x2', 
		'\x2', '\xA4', '\xA5', '\x5', '\x1A', '\xE', '\x2', '\xA5', '\xA6', '\a', 
		'/', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x1A', '\xE', '\x2', '\xA7', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '.', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\xF', '\x2', '\x2', '\xAA', '\xAB', '\x5', 
		'\x1C', '\xF', '\x2', '\xAB', '\xAC', '\a', '\x10', '\x2', '\x2', '\xAC', 
		'\xB4', '\x5', '\x1A', '\xE', '\x2', '\xAD', '\xAE', '\a', '/', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', '.', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\xF', '\x2', '\x2', '\xB0', '\xB1', '\x5', '\x1C', '\xF', '\x2', '\xB1', 
		'\xB2', '\a', '\x10', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x1A', '\xE', 
		'\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'.', '\x2', '\x2', '\xB9', '\xBA', '\a', '\xF', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '\x1C', '\xF', '\x2', '\xBB', '\xBC', '\a', '\x10', '\x2', 
		'\x2', '\xBC', '\xC4', '\x5', '\x1A', '\xE', '\x2', '\xBD', '\xBE', '\a', 
		'/', '\x2', '\x2', '\xBE', '\xBF', '\a', '.', '\x2', '\x2', '\xBF', '\xC0', 
		'\a', '\xF', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x1C', '\xF', '\x2', 
		'\xC1', '\xC2', '\a', '\x10', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\x1A', 
		'\xE', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\a', '/', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\x1A', '\xE', '\x2', 
		'\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\x11', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD1', '\a', '#', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '#', '\x2', '\x2', '\xCF', '\xD1', 
		'\x5', '\x1C', '\xF', '\x2', '\xD0', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\a', '\x30', '\x2', '\x2', '\xD3', '\xD4', 
		'\a', '\xF', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\x1C', '\xF', '\x2', 
		'\xD5', '\xD6', '\a', '\x10', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\x1A', 
		'\xE', '\x2', '\xD7', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\a', '\x31', '\x2', '\x2', '\xD9', '\xDA', '\x5', '\x1A', '\xE', '\x2', 
		'\xDA', '\xDB', '\a', '\x30', '\x2', '\x2', '\xDB', '\xDC', '\a', '\xF', 
		'\x2', '\x2', '\xDC', '\xDD', '\x5', '\x1C', '\xF', '\x2', '\xDD', '\xDE', 
		'\a', '\x10', '\x2', '\x2', '\xDE', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x15', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', 
		'\x5', '\x1C', '\xF', '\x2', '\xE2', '\xE3', '\a', '\xF', '\x2', '\x2', 
		'\xE3', '\xE4', '\x5', '\x1E', '\x10', '\x2', '\xE4', '\xE5', '\a', '\x10', 
		'\x2', '\x2', '\xE5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xEA', 
		'\a', '\x11', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x6', '\x4', '\x2', 
		'\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x12', 
		'\x2', '\x2', '\xEE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF3', 
		'\a', '\x11', '\x2', '\x2', '\xF0', '\xF2', '\x5', '\n', '\x6', '\x2', 
		'\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x12', 
		'\x2', '\x2', '\xF7', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\b', '\xF', '\x1', '\x2', '\xF9', '\xFA', '\a', '\xF', '\x2', '\x2', 
		'\xFA', '\xFB', '\x5', '\x1C', '\xF', '\x2', '\xFB', '\xFC', '\a', '\x10', 
		'\x2', '\x2', '\xFC', '\x108', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', 
		'\a', '\x15', '\x2', '\x2', '\xFE', '\x108', '\x5', '\x1C', '\xF', '\x11', 
		'\xFF', '\x100', '\a', '\f', '\x2', '\x2', '\x100', '\x108', '\x5', '\x1C', 
		'\xF', '\x10', '\x101', '\x108', '\a', ':', '\x2', '\x2', '\x102', '\x108', 
		'\a', '\x39', '\x2', '\x2', '\x103', '\x108', '\t', '\x2', '\x2', '\x2', 
		'\x104', '\x108', '\a', '\x38', '\x2', '\x2', '\x105', '\x108', '\a', 
		'\x37', '\x2', '\x2', '\x106', '\x108', '\x5', '@', '!', '\x2', '\x107', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\x107', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x107', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x103', '\x3', '\x2', '\x2', '\x2', '\x107', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\f', '\x6', '\x2', '\x2', '\x10A', '\x10B', 
		'\x5', '\x36', '\x1C', '\x2', '\x10B', '\x10C', '\x5', '\x1C', '\xF', 
		'\a', '\x10C', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\f', '\x5', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x38', '\x1D', '\x2', 
		'\x10F', '\x110', '\x5', '\x1C', '\xF', '\x6', '\x110', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\f', '\x4', '\x2', '\x2', '\x112', 
		'\x113', '\x5', ':', '\x1E', '\x2', '\x113', '\x114', '\x5', '\x1C', '\xF', 
		'\x5', '\x114', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\f', '\x3', '\x2', '\x2', '\x116', '\x117', '\x5', '<', '\x1F', '\x2', 
		'\x117', '\x118', '\x5', '\x1C', '\xF', '\x4', '\x118', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11A', '\f', '\t', '\x2', '\x2', '\x11A', 
		'\x11C', '\a', '\xF', '\x2', '\x2', '\x11B', '\x11D', '\x5', '\x1E', '\x10', 
		'\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x12C', '\a', '\x10', '\x2', '\x2', '\x11F', '\x120', '\f', 
		'\b', '\x2', '\x2', '\x120', '\x121', '\a', '\x13', '\x2', '\x2', '\x121', 
		'\x122', '\x5', '\x1E', '\x10', '\x2', '\x122', '\x123', '\a', '\x14', 
		'\x2', '\x2', '\x123', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', 
		'\f', '\a', '\x2', '\x2', '\x125', '\x126', '\a', '\x1D', '\x2', '\x2', 
		'\x126', '\x128', '\a', '\x36', '\x2', '\x2', '\x127', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x111', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x135', '\x5', '\x1C', '\xF', '\x2', '\x131', 
		'\x132', '\a', '\x1C', '\x2', '\x2', '\x132', '\x134', '\x5', '\x1C', 
		'\xF', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x139', '\a', '\"', '\x2', '\x2', '\x139', '\x13A', '\a', '\x1F', '\x2', 
		'\x2', '\x13A', '\x13B', '\x5', '@', '!', '\x2', '\x13B', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '$', '\x2', '\x2', '\x13D', 
		'\x13E', '\a', '\x36', '\x2', '\x2', '\x13E', '\x140', '\a', '\xF', '\x2', 
		'\x2', '\x13F', '\x141', '\x5', '\x42', '\"', '\x2', '\x140', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\a', 
		'\x10', '\x2', '\x2', '\x143', '\x144', '\a', '\x1B', '\x2', '\x2', '\x144', 
		'\x145', '\x5', '@', '!', '\x2', '\x145', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\a', '%', '\x2', '\x2', '\x147', '\x148', '\a', '\x36', 
		'\x2', '\x2', '\x148', '\x14A', '\a', '\xF', '\x2', '\x2', '\x149', '\x14B', 
		'\x5', '\x44', '#', '\x2', '\x14A', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14E', '\a', '\x10', '\x2', '\x2', '\x14D', 
		'\x14F', '\x5', '\x30', '\x19', '\x2', '\x14E', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\a', '\x1B', '\x2', '\x2', 
		'\x151', '\x153', '\x5', '\x46', '$', '\x2', '\x152', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x154', '\x156', '\x5', '\x32', '\x1A', 
		'\x2', '\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\a', '\x36', '\x2', '\x2', '\x158', '\x15A', '\a', 
		'\xF', '\x2', '\x2', '\x159', '\x15B', '\x5', ',', '\x17', '\x2', '\x15A', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15F', 
		'\a', '\x10', '\x2', '\x2', '\x15D', '\x15E', '\a', '\x1B', '\x2', '\x2', 
		'\x15E', '\x160', '\x5', '\x46', '$', '\x2', '\x15F', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x5', '\x1A', 
		'\xE', '\x2', '\x162', '\'', '\x3', '\x2', '\x2', '\x2', '\x163', '\x165', 
		'\a', '&', '\x2', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\'', '\x2', '\x2', '\x167', 
		'\x168', '\a', '\x36', '\x2', '\x2', '\x168', '\x16A', '\a', '\x11', '\x2', 
		'\x2', '\x169', '\x16B', '\x5', ',', '\x17', '\x2', '\x16A', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', 
		'\x12', '\x2', '\x2', '\x16D', ')', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\a', '(', '\x2', '\x2', '\x16F', '\x170', '\x5', '@', '!', '\x2', 
		'\x170', '\x174', '\a', '\x11', '\x2', '\x2', '\x171', '\x173', '\x5', 
		'\b', '\x5', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', '\x175', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\a', '\x12', '\x2', '\x2', '\x178', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x179', '\x17E', '\x5', '.', '\x18', '\x2', '\x17A', '\x17B', 
		'\a', '\x1C', '\x2', '\x2', '\x17B', '\x17D', '\x5', '.', '\x18', '\x2', 
		'\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\a', '\x36', '\x2', '\x2', '\x182', '\x183', '\a', '\x1B', '\x2', '\x2', 
		'\x183', '\x184', '\x5', '\x46', '$', '\x2', '\x184', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x185', '\x186', '\a', '\x3', '\x2', '\x2', '\x186', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x18F', '\a', '\x13', '\x2', '\x2', 
		'\x188', '\x18D', '\a', '\x36', '\x2', '\x2', '\x189', '\x18A', '\a', 
		'\xF', '\x2', '\x2', '\x18A', '\x18B', '\x5', '\x34', '\x1B', '\x2', '\x18B', 
		'\x18C', '\a', '\x10', '\x2', '\x2', '\x18C', '\x18E', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x188', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x194', '\a', '\x14', '\x2', '\x2', '\x194', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x19A', '\a', '\x36', '\x2', '\x2', 
		'\x196', '\x197', '\a', '\x1C', '\x2', '\x2', '\x197', '\x199', '\a', 
		'\x36', '\x2', '\x2', '\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x19C', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19E', '\t', '\x3', '\x2', '\x2', '\x19E', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x19F', '\x1A0', '\t', '\x4', '\x2', '\x2', '\x1A0', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\t', '\x5', '\x2', '\x2', 
		'\x1A2', ';', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '\x15', 
		'\x2', '\x2', '\x1A4', '\x1A9', '\a', '\x15', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\a', '\x16', '\x2', '\x2', '\x1A6', '\x1A9', '\a', '\x16', '\x2', '\x2', 
		'\x1A7', '\x1A9', '\a', '\x17', '\x2', '\x2', '\x1A8', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AF', '\a', '\x36', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\a', '\x1A', '\x2', '\x2', '\x1AC', '\x1AE', '\a', '\x36', '\x2', '\x2', 
		'\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B7', 
		'\a', '\x36', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x1A', '\x2', '\x2', 
		'\x1B4', '\x1B6', '\a', '\x36', '\x2', '\x2', '\x1B5', '\x1B3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BF', '\x5', '@', '!', '\x2', 
		'\x1BB', '\x1BC', '\a', '\x1C', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', 
		'@', '!', '\x2', '\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C7', '\x5', '\x46', '$', '\x2', '\x1C3', '\x1C4', '\a', '\x1C', 
		'\x2', '\x2', '\x1C4', '\x1C6', '\x5', '\x46', '$', '\x2', '\x1C5', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CE', '\x5', '@', '!', 
		'\x2', '\x1CB', '\x1CD', '\x5', 'H', '%', '\x2', '\x1CC', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\x1CF', 'G', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', '\f', '\x2', '\x2', '\x1D2', 
		'I', '\x3', '\x2', '\x2', '\x2', ')', 'M', '_', 'm', 's', '\x83', '\x94', 
		'\xB6', '\xC6', '\xCB', '\xD0', '\xDF', '\xEA', '\xF3', '\x107', '\x11C', 
		'\x129', '\x12B', '\x12D', '\x135', '\x140', '\x14A', '\x14E', '\x152', 
		'\x155', '\x15A', '\x15F', '\x164', '\x16A', '\x174', '\x17E', '\x18D', 
		'\x191', '\x19A', '\x1A8', '\x1AF', '\x1B7', '\x1BF', '\x1C7', '\x1CE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GamaPreprocessor.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GamaPreprocessorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Hash=4, PreInclude=5, PreDefine=6, PreUndef=7, 
		PreSet=8, PreIf=9, PreIfDef=10, PreIfndef=11, PreElse=12, PreEndif=13, 
		PrePragmna=14, Warning=15, Disable=16, Restore=17, Once=18, LT=19, GT=20, 
		LE=21, GE=22, EQ=23, NE=24, OpComparison=25, SC=26, ADD=27, NEG=28, MUL=29, 
		DIV=30, NullLiteral=31, StringLiteral=32, CharLiteral=33, BooleanLiteral=34, 
		FloatingLiteral=35, IntegerLiteral=36, MultiComment=37, LineComment=38, 
		WhiteSpace=39, Symbol=40, NonNewlineString=41, NonNewlineChar=42, NumericLiteral=43, 
		PreIfdef=44, PrePragma=45, PreWarning=46, PreError=47;
	public const int
		RULE_program = 0, RULE_preStatement = 1, RULE_preInclude = 2, RULE_symbolList = 3, 
		RULE_preDefine = 4, RULE_preSet = 5, RULE_preUndef = 6, RULE_preIf = 7, 
		RULE_preIfdef = 8, RULE_preIfndef = 9, RULE_prePragma = 10, RULE_preWarning = 11, 
		RULE_preError = 12, RULE_src = 13;
	public static readonly string[] ruleNames = {
		"program", "preStatement", "preInclude", "symbolList", "preDefine", "preSet", 
		"preUndef", "preIf", "preIfdef", "preIfndef", "prePragma", "preWarning", 
		"preError", "src"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'#'", null, null, null, null, null, null, 
		null, null, null, null, "'warning'", "'disable'", "'restore'", "'once'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'!='", null, "';'", "'+'", "'-'", 
		"'*'", "'/'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Hash", "PreInclude", "PreDefine", "PreUndef", 
		"PreSet", "PreIf", "PreIfDef", "PreIfndef", "PreElse", "PreEndif", "PrePragmna", 
		"Warning", "Disable", "Restore", "Once", "LT", "GT", "LE", "GE", "EQ", 
		"NE", "OpComparison", "SC", "ADD", "NEG", "MUL", "DIV", "NullLiteral", 
		"StringLiteral", "CharLiteral", "BooleanLiteral", "FloatingLiteral", "IntegerLiteral", 
		"MultiComment", "LineComment", "WhiteSpace", "Symbol", "NonNewlineString", 
		"NonNewlineChar", "NumericLiteral", "PreIfdef", "PrePragma", "PreWarning", 
		"PreError"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GamaPreprocessor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GamaPreprocessorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GamaPreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GamaPreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GamaPreprocessorParser.Eof, 0); }
		public PreStatementContext[] preStatement() {
			return GetRuleContexts<PreStatementContext>();
		}
		public PreStatementContext preStatement(int i) {
			return GetRuleContext<PreStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PreInclude) | (1L << PreDefine) | (1L << PreUndef) | (1L << PreIf) | (1L << PreIfndef) | (1L << PreIfdef) | (1L << PrePragma) | (1L << PreWarning) | (1L << PreError))) != 0)) {
				{
				{
				State = 28; preStatement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreStatementContext : ParserRuleContext {
		public PreStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preStatement; } }
	 
		public PreStatementContext() { }
		public virtual void CopyFrom(PreStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorIfContext : PreStatementContext {
		public PreIfContext preIf() {
			return GetRuleContext<PreIfContext>(0);
		}
		public PreprocessorIfContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDefineStmtContext : PreStatementContext {
		public PreDefineContext preDefine() {
			return GetRuleContext<PreDefineContext>(0);
		}
		public PreprocessorDefineStmtContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefineStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefineStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorUndefStmtContext : PreStatementContext {
		public PreUndefContext preUndef() {
			return GetRuleContext<PreUndefContext>(0);
		}
		public PreprocessorUndefStmtContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorUndefStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorUndefStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorUndefStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorIfndefStmtContext : PreStatementContext {
		public PreIfndefContext preIfndef() {
			return GetRuleContext<PreIfndefContext>(0);
		}
		public PreprocessorIfndefStmtContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfndefStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfndefStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfndefStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorIfdefStmtContext : PreStatementContext {
		public PreIfdefContext preIfdef() {
			return GetRuleContext<PreIfdefContext>(0);
		}
		public PreprocessorIfdefStmtContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfdefStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfdefStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfdefStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorErrorContext : PreStatementContext {
		public PreErrorContext preError() {
			return GetRuleContext<PreErrorContext>(0);
		}
		public PreprocessorErrorContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorError(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorWarningContext : PreStatementContext {
		public PreWarningContext preWarning() {
			return GetRuleContext<PreWarningContext>(0);
		}
		public PreprocessorWarningContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorWarning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorWarning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorPragmaStmtContext : PreStatementContext {
		public PrePragmaContext prePragma() {
			return GetRuleContext<PrePragmaContext>(0);
		}
		public PreprocessorPragmaStmtContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorPragmaStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorPragmaStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPragmaStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorIncludeStmtContext : PreStatementContext {
		public PreIncludeContext preInclude() {
			return GetRuleContext<PreIncludeContext>(0);
		}
		public PreprocessorIncludeStmtContext(PreStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreprocessorIncludeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreprocessorIncludeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIncludeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreStatementContext preStatement() {
		PreStatementContext _localctx = new PreStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_preStatement);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PreInclude:
				_localctx = new PreprocessorIncludeStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; preInclude();
				}
				break;
			case PreDefine:
				_localctx = new PreprocessorDefineStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; preDefine();
				}
				break;
			case PreUndef:
				_localctx = new PreprocessorUndefStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; preUndef();
				}
				break;
			case PreIf:
				_localctx = new PreprocessorIfContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; preIf();
				}
				break;
			case PreIfdef:
				_localctx = new PreprocessorIfdefStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 40; preIfdef();
				}
				break;
			case PreIfndef:
				_localctx = new PreprocessorIfndefStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 41; preIfndef();
				}
				break;
			case PrePragma:
				_localctx = new PreprocessorPragmaStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 42; prePragma();
				}
				break;
			case PreWarning:
				_localctx = new PreprocessorWarningContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 43; preWarning();
				}
				break;
			case PreError:
				_localctx = new PreprocessorErrorContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 44; preError();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncludeContext : ParserRuleContext {
		public ITerminalNode PreInclude() { return GetToken(GamaPreprocessorParser.PreInclude, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaPreprocessorParser.StringLiteral, 0); }
		public PreIncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preInclude; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncludeContext preInclude() {
		PreIncludeContext _localctx = new PreIncludeContext(Context, State);
		EnterRule(_localctx, 4, RULE_preInclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(PreInclude);
			State = 48; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolListContext : ParserRuleContext {
		public ITerminalNode[] Symbol() { return GetTokens(GamaPreprocessorParser.Symbol); }
		public ITerminalNode Symbol(int i) {
			return GetToken(GamaPreprocessorParser.Symbol, i);
		}
		public SymbolListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitSymbolList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolListContext symbolList() {
		SymbolListContext _localctx = new SymbolListContext(Context, State);
		EnterRule(_localctx, 6, RULE_symbolList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(Symbol);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 51; Match(T__0);
				State = 52; Match(Symbol);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDefineContext : ParserRuleContext {
		public PreDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDefine; } }
	 
		public PreDefineContext() { }
		public virtual void CopyFrom(PreDefineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtPreDefineMacroContext : PreDefineContext {
		public ITerminalNode PreDefine() { return GetToken(GamaPreprocessorParser.PreDefine, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode NonNewlineString() { return GetToken(GamaPreprocessorParser.NonNewlineString, 0); }
		public SymbolListContext symbolList() {
			return GetRuleContext<SymbolListContext>(0);
		}
		public StmtPreDefineMacroContext(PreDefineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterStmtPreDefineMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitStmtPreDefineMacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPreDefineMacro(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtPreDefineAbsoluteContext : PreDefineContext {
		public ITerminalNode PreDefine() { return GetToken(GamaPreprocessorParser.PreDefine, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode NonNewlineString() { return GetToken(GamaPreprocessorParser.NonNewlineString, 0); }
		public StmtPreDefineAbsoluteContext(PreDefineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterStmtPreDefineAbsolute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitStmtPreDefineAbsolute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPreDefineAbsolute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtPreDefineBoolContext : PreDefineContext {
		public ITerminalNode PreDefine() { return GetToken(GamaPreprocessorParser.PreDefine, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public StmtPreDefineBoolContext(PreDefineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterStmtPreDefineBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitStmtPreDefineBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPreDefineBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDefineContext preDefine() {
		PreDefineContext _localctx = new PreDefineContext(Context, State);
		EnterRule(_localctx, 8, RULE_preDefine);
		int _la;
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new StmtPreDefineBoolContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(PreDefine);
				State = 59; Match(Symbol);
				}
				break;
			case 2:
				_localctx = new StmtPreDefineAbsoluteContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(PreDefine);
				State = 61; Match(Symbol);
				State = 62; Match(NonNewlineString);
				}
				break;
			case 3:
				_localctx = new StmtPreDefineMacroContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; Match(PreDefine);
				State = 64; Match(Symbol);
				State = 65; Match(T__1);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Symbol) {
					{
					State = 66; symbolList();
					}
				}

				State = 69; Match(T__2);
				State = 70; Match(NonNewlineString);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreSetContext : ParserRuleContext {
		public ITerminalNode PreSet() { return GetToken(GamaPreprocessorParser.PreSet, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode[] NonNewlineChar() { return GetTokens(GamaPreprocessorParser.NonNewlineChar); }
		public ITerminalNode NonNewlineChar(int i) {
			return GetToken(GamaPreprocessorParser.NonNewlineChar, i);
		}
		public PreSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreSetContext preSet() {
		PreSetContext _localctx = new PreSetContext(Context, State);
		EnterRule(_localctx, 10, RULE_preSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(PreSet);
			State = 74; Match(Symbol);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 75; Match(NonNewlineChar);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NonNewlineChar );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreUndefContext : ParserRuleContext {
		public ITerminalNode PreUndef() { return GetToken(GamaPreprocessorParser.PreUndef, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public PreUndefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preUndef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreUndef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreUndef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreUndef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreUndefContext preUndef() {
		PreUndefContext _localctx = new PreUndefContext(Context, State);
		EnterRule(_localctx, 12, RULE_preUndef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(PreUndef);
			State = 81; Match(Symbol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIfContext : ParserRuleContext {
		public PreIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIf; } }
	 
		public PreIfContext() { }
		public virtual void CopyFrom(PreIfContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtPreIfNumericCompContext : PreIfContext {
		public IToken preblock;
		public IToken preelse;
		public ITerminalNode PreIf() { return GetToken(GamaPreprocessorParser.PreIf, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode OpComparison() { return GetToken(GamaPreprocessorParser.OpComparison, 0); }
		public ITerminalNode NumericLiteral() { return GetToken(GamaPreprocessorParser.NumericLiteral, 0); }
		public ITerminalNode PreEndif() { return GetToken(GamaPreprocessorParser.PreEndif, 0); }
		public ITerminalNode PreElse() { return GetToken(GamaPreprocessorParser.PreElse, 0); }
		public StmtPreIfNumericCompContext(PreIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterStmtPreIfNumericComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitStmtPreIfNumericComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPreIfNumericComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtPreIfStringEqContext : PreIfContext {
		public IToken preblock;
		public IToken preelse;
		public ITerminalNode PreIf() { return GetToken(GamaPreprocessorParser.PreIf, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode EQ() { return GetToken(GamaPreprocessorParser.EQ, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaPreprocessorParser.StringLiteral, 0); }
		public ITerminalNode PreEndif() { return GetToken(GamaPreprocessorParser.PreEndif, 0); }
		public ITerminalNode PreElse() { return GetToken(GamaPreprocessorParser.PreElse, 0); }
		public StmtPreIfStringEqContext(PreIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterStmtPreIfStringEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitStmtPreIfStringEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPreIfStringEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtPreIfStringNeContext : PreIfContext {
		public IToken preblock;
		public IToken preelse;
		public ITerminalNode PreIf() { return GetToken(GamaPreprocessorParser.PreIf, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode NE() { return GetToken(GamaPreprocessorParser.NE, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaPreprocessorParser.StringLiteral, 0); }
		public ITerminalNode PreEndif() { return GetToken(GamaPreprocessorParser.PreEndif, 0); }
		public ITerminalNode PreElse() { return GetToken(GamaPreprocessorParser.PreElse, 0); }
		public StmtPreIfStringNeContext(PreIfContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterStmtPreIfStringNe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitStmtPreIfStringNe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPreIfStringNe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIfContext preIf() {
		PreIfContext _localctx = new PreIfContext(Context, State);
		EnterRule(_localctx, 14, RULE_preIf);
		try {
			int _alt;
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new StmtPreIfStringEqContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; Match(PreIf);
				State = 84; Match(Symbol);
				State = 85; Match(EQ);
				State = 86; Match(StringLiteral);
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 87;
						((StmtPreIfStringEqContext)_localctx).preblock = MatchWildcard();
						}
						} 
					}
					State = 92;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				{
				State = 93; Match(PreElse);
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 94;
						((StmtPreIfStringEqContext)_localctx).preelse = MatchWildcard();
						}
						} 
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				State = 100; Match(PreEndif);
				}
				break;
			case 2:
				_localctx = new StmtPreIfStringNeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(PreIf);
				State = 102; Match(Symbol);
				State = 103; Match(NE);
				State = 104; Match(StringLiteral);
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 105;
						((StmtPreIfStringNeContext)_localctx).preblock = MatchWildcard();
						}
						} 
					}
					State = 110;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				{
				State = 111; Match(PreElse);
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 112;
						((StmtPreIfStringNeContext)_localctx).preelse = MatchWildcard();
						}
						} 
					}
					State = 117;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				State = 118; Match(PreEndif);
				}
				break;
			case 3:
				_localctx = new StmtPreIfNumericCompContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; Match(PreIf);
				State = 120; Match(Symbol);
				State = 121; Match(OpComparison);
				State = 122; Match(NumericLiteral);
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 123;
						((StmtPreIfNumericCompContext)_localctx).preblock = MatchWildcard();
						}
						} 
					}
					State = 128;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				{
				State = 129; Match(PreElse);
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 130;
						((StmtPreIfNumericCompContext)_localctx).preelse = MatchWildcard();
						}
						} 
					}
					State = 135;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
				State = 136; Match(PreEndif);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIfdefContext : ParserRuleContext {
		public IToken preblock;
		public IToken preelse;
		public ITerminalNode PreIfdef() { return GetToken(GamaPreprocessorParser.PreIfdef, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode PreEndif() { return GetToken(GamaPreprocessorParser.PreEndif, 0); }
		public ITerminalNode PreElse() { return GetToken(GamaPreprocessorParser.PreElse, 0); }
		public PreIfdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIfdef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreIfdef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreIfdef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIfdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIfdefContext preIfdef() {
		PreIfdefContext _localctx = new PreIfdefContext(Context, State);
		EnterRule(_localctx, 16, RULE_preIfdef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(PreIfdef);
			State = 140; Match(Symbol);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 141;
					_localctx.preblock = MatchWildcard();
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			{
			State = 147; Match(PreElse);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 148;
					_localctx.preelse = MatchWildcard();
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
			State = 154; Match(PreEndif);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIfndefContext : ParserRuleContext {
		public IToken preblock;
		public IToken preelse;
		public ITerminalNode PreIfndef() { return GetToken(GamaPreprocessorParser.PreIfndef, 0); }
		public ITerminalNode Symbol() { return GetToken(GamaPreprocessorParser.Symbol, 0); }
		public ITerminalNode PreEndif() { return GetToken(GamaPreprocessorParser.PreEndif, 0); }
		public ITerminalNode PreElse() { return GetToken(GamaPreprocessorParser.PreElse, 0); }
		public PreIfndefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIfndef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreIfndef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreIfndef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIfndef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIfndefContext preIfndef() {
		PreIfndefContext _localctx = new PreIfndefContext(Context, State);
		EnterRule(_localctx, 18, RULE_preIfndef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(PreIfndef);
			State = 157; Match(Symbol);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 158;
					_localctx.preblock = MatchWildcard();
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			{
			State = 164; Match(PreElse);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 165;
					_localctx.preelse = MatchWildcard();
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
			State = 171; Match(PreEndif);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrePragmaContext : ParserRuleContext {
		public ITerminalNode PrePragma() { return GetToken(GamaPreprocessorParser.PrePragma, 0); }
		public ITerminalNode Once() { return GetToken(GamaPreprocessorParser.Once, 0); }
		public ITerminalNode Warning() { return GetToken(GamaPreprocessorParser.Warning, 0); }
		public ITerminalNode Disable() { return GetToken(GamaPreprocessorParser.Disable, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaPreprocessorParser.StringLiteral, 0); }
		public ITerminalNode Restore() { return GetToken(GamaPreprocessorParser.Restore, 0); }
		public PrePragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prePragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPrePragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPrePragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrePragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrePragmaContext prePragma() {
		PrePragmaContext _localctx = new PrePragmaContext(Context, State);
		EnterRule(_localctx, 20, RULE_prePragma);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; Match(PrePragma);
				State = 174; Match(Once);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; Match(PrePragma);
				State = 176; Match(Warning);
				State = 177; Match(Disable);
				State = 178; Match(StringLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179; Match(PrePragma);
				State = 180; Match(Warning);
				State = 181; Match(Restore);
				State = 182; Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreWarningContext : ParserRuleContext {
		public ITerminalNode PreWarning() { return GetToken(GamaPreprocessorParser.PreWarning, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaPreprocessorParser.StringLiteral, 0); }
		public PreWarningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preWarning; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreWarning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreWarning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreWarning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreWarningContext preWarning() {
		PreWarningContext _localctx = new PreWarningContext(Context, State);
		EnterRule(_localctx, 22, RULE_preWarning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(PreWarning);
			State = 186; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreErrorContext : ParserRuleContext {
		public ITerminalNode PreError() { return GetToken(GamaPreprocessorParser.PreError, 0); }
		public ITerminalNode StringLiteral() { return GetToken(GamaPreprocessorParser.StringLiteral, 0); }
		public PreErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preError; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterPreError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitPreError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreErrorContext preError() {
		PreErrorContext _localctx = new PreErrorContext(Context, State);
		EnterRule(_localctx, 24, RULE_preError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(PreError);
			State = 189; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrcContext : ParserRuleContext {
		public SrcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_src; } }
	 
		public SrcContext() { }
		public virtual void CopyFrom(SrcContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SourceContext : SrcContext {
		public SourceContext(SrcContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGamaPreprocessorListener typedListener = listener as IGamaPreprocessorListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGamaPreprocessorVisitor<TResult> typedVisitor = visitor as IGamaPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SrcContext src() {
		SrcContext _localctx = new SrcContext(Context, State);
		EnterRule(_localctx, 26, RULE_src);
		try {
			_localctx = new SourceContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			MatchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\xC4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x30', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x38', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', ';', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x46', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'J', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x6', '\a', 'O', '\n', '\a', '\r', '\a', '\xE', '\a', 
		'P', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '[', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '^', '\v', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x62', '\n', '\t', '\f', '\t', '\xE', '\t', '\x65', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', 'm', '\n', '\t', '\f', '\t', '\xE', '\t', 'p', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 't', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'w', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x7F', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x82', '\v', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x86', '\n', '\t', '\f', '\t', '\xE', '\t', '\x89', '\v', '\t', '\x3', 
		'\t', '\x5', '\t', '\x8C', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\x91', '\n', '\n', '\f', '\n', '\xE', '\n', '\x94', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x98', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x9B', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xA2', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xA5', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\xA9', '\n', '\v', '\f', '\v', '\xE', '\v', '\xAC', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xBA', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\f', '\\', '\x63', 'n', 'u', '\x80', '\x87', 
		'\x92', '\x99', '\xA3', '\xAA', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x2', '\x2', '\x2', '\xD1', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x34', '\x3', '\x2', '\x2', '\x2', '\n', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'K', '\x3', '\x2', '\x2', '\x2', '\xE', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\a', '\x2', '\x2', '\x3', '%', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x30', '\x5', '\x6', '\x4', '\x2', '\'', '\x30', 
		'\x5', '\n', '\x6', '\x2', '(', '\x30', '\x5', '\xE', '\b', '\x2', ')', 
		'\x30', '\x5', '\x10', '\t', '\x2', '*', '\x30', '\x5', '\x12', '\n', 
		'\x2', '+', '\x30', '\x5', '\x14', '\v', '\x2', ',', '\x30', '\x5', '\x16', 
		'\f', '\x2', '-', '\x30', '\x5', '\x18', '\r', '\x2', '.', '\x30', '\x5', 
		'\x1A', '\xE', '\x2', '/', '&', '\x3', '\x2', '\x2', '\x2', '/', '\'', 
		'\x3', '\x2', '\x2', '\x2', '/', '(', '\x3', '\x2', '\x2', '\x2', '/', 
		')', '\x3', '\x2', '\x2', '\x2', '/', '*', '\x3', '\x2', '\x2', '\x2', 
		'/', '+', '\x3', '\x2', '\x2', '\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', 
		'/', '-', '\x3', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\a', 
		'\x2', '\x2', '\x32', '\x33', '\a', '\"', '\x2', '\x2', '\x33', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x39', '\a', '*', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\x3', '\x2', '\x2', '\x36', '\x38', '\a', '*', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', '\t', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\b', '\x2', '\x2', 
		'=', 'J', '\a', '*', '\x2', '\x2', '>', '?', '\a', '\b', '\x2', '\x2', 
		'?', '@', '\a', '*', '\x2', '\x2', '@', 'J', '\a', '+', '\x2', '\x2', 
		'\x41', '\x42', '\a', '\b', '\x2', '\x2', '\x42', '\x43', '\a', '*', '\x2', 
		'\x2', '\x43', '\x45', '\a', '\x4', '\x2', '\x2', '\x44', '\x46', '\x5', 
		'\b', '\x5', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\a', '\x5', '\x2', '\x2', 'H', 'J', '\a', '+', '\x2', 
		'\x2', 'I', '<', '\x3', '\x2', '\x2', '\x2', 'I', '>', '\x3', '\x2', '\x2', 
		'\x2', 'I', '\x41', '\x3', '\x2', '\x2', '\x2', 'J', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\a', '\n', '\x2', '\x2', 'L', 'N', '\a', '*', 
		'\x2', '\x2', 'M', 'O', '\a', ',', '\x2', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\t', '\x2', '\x2', 'S', 'T', '\a', 
		'*', '\x2', '\x2', 'T', '\xF', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\v', '\x2', '\x2', 'V', 'W', '\a', '*', '\x2', '\x2', 'W', 'X', '\a', 
		'\x19', '\x2', '\x2', 'X', '\\', '\a', '\"', '\x2', '\x2', 'Y', '[', '\v', 
		'\x2', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', 
		'\\', '\x3', '\x2', '\x2', '\x2', '_', '\x63', '\a', '\xE', '\x2', '\x2', 
		'`', '\x62', '\v', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x8C', '\a', '\xF', '\x2', '\x2', 'g', 'h', '\a', '\v', 
		'\x2', '\x2', 'h', 'i', '\a', '*', '\x2', '\x2', 'i', 'j', '\a', '\x1A', 
		'\x2', '\x2', 'j', 'n', '\a', '\"', '\x2', '\x2', 'k', 'm', '\v', '\x2', 
		'\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'u', '\a', '\xE', '\x2', '\x2', 'r', 't', '\v', '\x2', 
		'\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x8C', '\a', '\xF', '\x2', '\x2', 'y', 'z', '\a', 
		'\v', '\x2', '\x2', 'z', '{', '\a', '*', '\x2', '\x2', '{', '|', '\a', 
		'\x1B', '\x2', '\x2', '|', '\x80', '\a', '-', '\x2', '\x2', '}', '\x7F', 
		'\v', '\x2', '\x2', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x87', '\a', '\xE', '\x2', '\x2', '\x84', '\x86', '\v', '\x2', '\x2', 
		'\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\a', 
		'\xF', '\x2', '\x2', '\x8B', 'U', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x8B', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '.', 
		'\x2', '\x2', '\x8E', '\x92', '\a', '*', '\x2', '\x2', '\x8F', '\x91', 
		'\v', '\x2', '\x2', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x94', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x99', '\a', '\xE', '\x2', '\x2', '\x96', '\x98', '\v', '\x2', 
		'\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '\xF', '\x2', '\x2', '\x9D', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9F', '\a', '\r', '\x2', '\x2', '\x9F', '\xA3', '\a', '*', '\x2', 
		'\x2', '\xA0', '\xA2', '\v', '\x2', '\x2', '\x2', '\xA1', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xAA', '\a', '\xE', '\x2', '\x2', '\xA7', 
		'\xA9', '\v', '\x2', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '\xF', '\x2', '\x2', '\xAE', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '/', '\x2', '\x2', '\xB0', 
		'\xBA', '\a', '\x14', '\x2', '\x2', '\xB1', '\xB2', '\a', '/', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', '\x11', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'\x12', '\x2', '\x2', '\xB4', '\xBA', '\a', '\"', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '/', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x11', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', '\x13', '\x2', '\x2', '\xB8', '\xBA', '\a', 
		'\"', '\x2', '\x2', '\xB9', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'\x30', '\x2', '\x2', '\xBC', '\xBD', '\a', '\"', '\x2', '\x2', '\xBD', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x31', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '\"', '\x2', '\x2', '\xC0', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\v', '\x2', '\x2', '\x2', '\xC2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x14', '!', '/', '\x39', '\x45', 
		'I', 'P', '\\', '\x63', 'n', 'u', '\x80', '\x87', '\x8B', '\x92', '\x99', 
		'\xA3', '\xAA', '\xB9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
